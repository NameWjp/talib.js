// initialize wasm module

/** @internal */
declare var __INIT__: (m: any) => Promise<IWasmModule>;

/** @interal */
const enum ByteSize {
  i8 = 1,
  i16 = 2,
  i32 = 4,
  i64 = 8,
  float = 4,
  double = 8,
}

/** @internal */
type IWasmCTypes = 'i1' | 'i8' | 'i16' | 'i32' | 'i64' | 'float' | 'double';

/** @internal */
interface IWasmModule {
  _malloc(size: number): number;
  _free(offset: number): void;
  HEAP8: Int8Array;
  HEAP16: Int16Array;
  HEAP32: Int32Array;
  HEAPU8: Uint8Array;
  HEAPU16: Uint16Array;
  HEAPU32: Uint32Array;
  HEAPF32: Float32Array;
  HEAPF64: Float64Array;
  ccall(
    funcIdent: string,
    retCodeType: string,
    argTypes: any[],
    args: any[]
  ): number;
  setValue(ptr: number, value: number, type: IWasmCTypes): void;
  getValue(ptr: number, type: IWasmCTypes): number;
}

/** @internal */
let Module: IWasmModule;

/** @internal */
function double_array(size: number) {
  const BYTE_SIZE = ByteSize.double;
  const offset = Module._malloc(size * BYTE_SIZE);
  const offsetF64 = offset / BYTE_SIZE;
  Module.HEAPF64.set(new Float64Array(size), offsetF64);
  return {
    data: Module.HEAPF64.subarray(offsetF64, offsetF64 + size),
    pointer: offset,
  };
}

/** @internal */
function c_pointer(type: IWasmCTypes, initValue?: number) {
  const offset = Module._malloc(ByteSize.i32);
  const ref = {
    get data() {
      return Module.getValue(offset, type);
    },
    set data(val: number) {
      Module.setValue(offset, val, type);
    },
    pointer: offset,
  };
  if (initValue !== undefined) {
    ref.data = initValue;
  }
  return ref;
}

/** @internal */
const TA_RET_CODE = {
  0: 'TA_SUCCESS',
  1: 'TA_LIB_NOT_INITIALIZE',
  2: 'TA_BAD_PARAM',
  3: 'TA_ALLOC_ERR',
  4: 'TA_GROUP_NOT_FOUND',
  5: 'TA_FUNC_NOT_FOUND',
  6: 'TA_INVALID_HANDLE',
  7: 'TA_INVALID_PARAM_HOLDER',
  8: 'TA_INVALID_PARAM_HOLDER_TYPE',
  9: 'TA_INVALID_PARAM_FUNCTION',
  10: 'TA_INPUT_NOT_ALL_INITIALIZE',
  11: 'TA_OUTPUT_NOT_ALL_INITIALIZE',
  12: 'TA_OUT_OF_RANGE_START_INDEX',
  13: 'TA_OUT_OF_RANGE_END_INDEX',
  14: 'TA_INVALID_LIST_TYPE',
  15: 'TA_BAD_OBJECT',
  16: 'TA_NOT_SUPPORTED',
  5000: 'TA_INTERNAL_ERROR',
  [0xffff]: 'TA_UNKNOWN_ERR',
};

// src/ta-lib/include/ta_defs.h:213
/** @internal */
const TA_INTEGER_DEFAULT = -2147483648;

/** @internal */
type APIDescriptor = {
  name: string;
  camelCaseName: string;
  group: string;
  description: string;
  inputs: {
    name: string;
    type: string;
  }[];
  options: {
    name: string;
    displayName: string;
    defaultValue: number;
    hint: string;
    type: string;
    range?: {
      min: number;
      max: number;
    };
  }[];
  outputs: {
    name: string;
    type: string;
    plotHint: string;
  }[];
};

/** @internal */
function callFunc(api: APIDescriptor, params: any): any {
  const funcIdent = `TA_${api.name}`;
  if (!Module) throw Error(`${api.name}() called before initialization.`);

  // prettier-ignore
  const ccallArgsLen =
    2 /* startIdx, endIdx */ + 
    api.inputs.length + 
    api.options.length + 
    2 /* outBegIdx, outNBElement */ + 
    api.outputs.length;

  const argTypes = new Array(ccallArgsLen).fill('number');

  /**
   * Input params validation
   */
  for (const { name } of api.inputs) {
    if (!Array.isArray(params[name])) {
      if (params[name] === undefined)
        throw Error(`Bad Param: "${name}" is required`);
      throw Error(`Bad Param: "${name}" should be array of number`);
    }
  }

  for (const { name, range } of api.options) {
    if (params[name] === undefined) {
      params[name] = TA_INTEGER_DEFAULT;
    } else if (
      range &&
      (params[name] < range.min || params[name] > range.max)
    ) {
      throw Error(
        `Bad Param: "${name}" out of range (min: ${range.min}, max: ${range.max})`
      );
    }
  }

  let { startIdx, endIdx } = params;
  if (startIdx === undefined) startIdx = 0;
  const reqParamsLen = api.inputs.map(({ name }) => params[name].length - 1);
  if (endIdx === undefined) {
    // endIdx safely set to the min of all input arrays
    endIdx = Math.min(...reqParamsLen);
  }

  /**
   * Constructing `args` to pass to the `Module.ccall` API
   * Move things from `params` onto `args`
   *
   * TA-Lib function signatures are of following form:
   * ```
   * FUNC(startIdx, endIdx, ...params, outBegIdx, outNBElement, ...outputs)
   * ```
   */
  const args = [startIdx, endIdx];
  const memToFree = [];

  api.inputs.forEach(({ name }) => {
    const argArray = double_array(endIdx - startIdx + 1);
    /** @type {number[]} */
    const paramArray = params[name];
    for (const i in paramArray) argArray.data[i] = paramArray[i];
    memToFree.push(argArray.pointer);
    args.push(argArray.pointer);
  });

  api.options.forEach(({ name }) => args.push(params[name]));

  const outBegIdxRef = c_pointer('i32', 0);
  const outNBElementRef = c_pointer('i32', 0);
  memToFree.push(outBegIdxRef.pointer);
  memToFree.push(outNBElementRef.pointer);
  args.push(outBegIdxRef.pointer);
  args.push(outNBElementRef.pointer);

  const outputs = api.outputs.map(({ name }) => {
    const argArray = double_array(endIdx - startIdx + 1);
    memToFree.push(argArray.pointer);
    args.push(argArray.pointer);
    return { name, array: argArray };
  });

  const retCode = Module.ccall(
    funcIdent,
    'number' /* TA_RET_CODE */,
    argTypes,
    args
  );

  const outBegIdx = outBegIdxRef.data;
  const outNBElement = outNBElementRef.data;

  const result = outputs.reduce(
    (result, current) => {
      const data = new Array(outBegIdx).fill(0).concat(Array.from(current.array.data.slice(0, endIdx - outBegIdx + 1)));
      result[current.name] = data;
      return result;
    },
    { outBegIdx, outNBElement }
  );

  memToFree.forEach((offset) => Module._free(offset));

  if (retCode === 0) {
    // success
    return result;
  } else {
    throw Error('[C_ERROR] ' + TA_RET_CODE[retCode]);
  }
}

// ======================
// Public API exports
// ======================

// prettier-ignore
/**
 * The `MAType` enum to be passed to some of the functions
 */
export enum MAType {
  SMA   = 0,
  EMA   = 1,
  WMA   = 2,
  DEMA  = 3,
  TEMA  = 4,
  TRIMA = 5,
  KAMA  = 6,
  MAMA  = 7,
  T3    = 8,
}

/**
 * ## Initialize wasm module
 *
 * To use the lib, you must first call `init()` to load and compile the wasm binary file in the JS runtime.
 * Because of the async nature of wasm binary loading/compilation process,
 * you must wait until the compilation complete before calling any functions.
 *
 * `init()` is idempotent, that means calling it multiple times will NOT re-initialize
 * or create new instance of the wasm module.
 *
 * ### Usage
 *
 * Normally you would just want to be notified when ready:
 * ```
 * import { init, EMA } from 'talib.js';
 *
 * await init();
 * EMA(...);
 * ```
 *
 * In case you want to directly interact with the emscripten wasm [Module API](https://emscripten.org/docs/api_reference/module.html),
 * just obtain the `Module` object from the promise.
 * ```
 * const Module = await init()
 * Module.ccall(...)
 * Module._malloc(...)
 * Module.HEAPF64
 * ```
 *
 * @category Initialization
 * @param wasmBinaryFilePath - optional, a string that specifies the location of wasm binary file
 * @returns A promise that resolves to the emscripten runtime `Module` object. See {@link https://emscripten.org/docs/api_reference/module.html}.
 */
export function init(wasmBinaryFilePath?: string): Promise<IWasmModule> {
  if (Module) return Promise.resolve(Module);

  if (wasmBinaryFilePath && typeof wasmBinaryFilePath !== 'string') {
    return Promise.reject(
      new Error(
        'Invalid argument, "init(wasmBinaryFilePath)" expects a string that specifies the location of wasm binary file'
      )
    );
  }

  const locateFile = wasmBinaryFilePath ? () => wasmBinaryFilePath : undefined;
  return __INIT__({ locateFile })
    .then((m) => (Module = m))
    .catch((e) => {
      let message = 'TA-Lib WASM runtime init fail.';
      if (e && e.message) {
        message += '\nError: \n' + e.message;
      } else {
        message +=
          'Unknown reason. Perhaps you specify the wrong file path to wasm binary?';
      }
      throw new Error(message);
    });
}
